type Query1 {
    sortedPacketCollections(from: String, to: String): [PacketCollection!]!
    fragmentedPacketCollections(from: String, to: String): [PacketCollection!]!
    packets(from: String, to: String): [PacketNode!]!
}
type PacketCollection {
    packets: [SolarPacket!]!
}
type PacketNode {
    dateMillis: Int!
    source: String!
    fragment: Int!
    identifier: String!
    packet: Packet!
}
interface Packet {
}
interface SolarPacket {
}

interface BatteryVoltage {
    batteryVoltage: Float!
}
type MXStatusPacket implements BatteryVoltage, SolarPacket, Packet {
    packetType: String!
    address: Int!
    chargerCurrent: Int!
    pvCurrent: Int!
    inputVoltage: Int!
    dailyKWH: Float!
    ampChargerCurrent: Int!
    auxMode: Int!
    errorMode: Int!
    chargerMode: Int!
    batteryVoltage: Float!
    dailyAH: Int!
    dailyAHSupport: String!
    chksum: Int!
    errors: String!
    auxModeName: String!
    chargerModeName: String!
}
type FXStatusPacket implements BatteryVoltage, SolarPacket, Packet {
    # TODO add more FX stuff
    batteryVoltage: Float!
}
union SearchResult = MXStatusPacket | FXStatusPacket

